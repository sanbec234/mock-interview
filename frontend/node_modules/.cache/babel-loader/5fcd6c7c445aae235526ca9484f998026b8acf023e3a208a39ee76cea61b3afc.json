{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\mohan\\\\Downloads\\\\mock-interview-main-working\\\\mock-interview-main-working\\\\frontend\\\\src\\\\pages\\\\home-page\\\\HomePage.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from \"react\";\nimport Header from \"./../../components/Header/Header\";\nimport Footer from \"./../../components/Footer/Footer\";\nimport \"./homepage.css\";\nimport { useNavigate } from \"react-router-dom\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst HomePage = () => {\n  _s();\n  const [questions, setQuestions] = useState([]);\n  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\n  const [answer, setAnswer] = useState(\"\"); // Current answer text\n  const [answers, setAnswers] = useState([]);\n  const [isListening, setIsListening] = useState(false);\n  const [isTTSActive, setIsTTSActive] = useState(true);\n  const [hasSpoken, setHasSpoken] = useState(false);\n  const recognitionRef = useRef(null);\n  const navigate = useNavigate();\n  useEffect(() => {\n    const fetchQuestions = async () => {\n      const email = localStorage.getItem(\"userEmail\"); // Get user email from localStorage\n      const numQuestions = localStorage.getItem(\"numQuestions\"); // Number of questions from DetailsPage\n      const selectedTopics = JSON.parse(localStorage.getItem(\"selectedTopics\") || \"[]\"); // Selected topics from DetailsPage\n\n      if (!email || !numQuestions || selectedTopics.length === 0) {\n        alert(\"Required details are missing. Please go back to the details page.\");\n        return;\n      }\n      try {\n        const response = await fetch(\"http://127.0.0.1:5000/start_test\", {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/json\"\n          },\n          body: JSON.stringify({\n            email,\n            numQuestions: parseInt(numQuestions),\n            selectedTopics\n          })\n        });\n        if (response.ok) {\n          const data = await response.json();\n          console.log(data);\n          setQuestions(data.questions || []);\n          localStorage.setItem(\"test_id\", data.test_id); // Store test ID in localStorage\n        } else {\n          console.error(\"Failed to fetch questions\");\n          alert(\"Failed to fetch questions. Please try again.\");\n        }\n      } catch (error) {\n        console.error(\"Error fetching questions:\", error);\n        alert(\"An error occurred while fetching questions.\");\n      }\n    };\n    fetchQuestions();\n  }, []);\n\n  // Initialize speech recognition\n  if (!recognitionRef.current && \"webkitSpeechRecognition\" in window) {\n    const SpeechRecognition = window.webkitSpeechRecognition;\n    const recognition = new SpeechRecognition();\n    recognition.lang = \"en-US\";\n    recognition.interimResults = false;\n    recognition.continuous = true;\n    recognition.onstart = () => {\n      setIsListening(true);\n    };\n    recognition.onend = () => {\n      setIsListening(false);\n    };\n    recognition.onresult = event => {\n      const transcript = Array.from(event.results).map(result => result[0].transcript).join(\" \");\n      setAnswer(prev => prev + \" \" + transcript); // Append recognized speech to the answer\n    };\n    recognition.onerror = () => {\n      setIsListening(false);\n    };\n    recognitionRef.current = recognition; // Save the instance\n  }\n  const speakText = text => {\n    const speech = new SpeechSynthesisUtterance(text);\n    speech.lang = \"en-US\";\n    window.speechSynthesis.speak(speech);\n  };\n  useEffect(() => {\n    if (isTTSActive && questions.length > 0 && !hasSpoken) {\n      speakText(questions[currentQuestionIndex].question);\n      setHasSpoken(true);\n    }\n  }, [currentQuestionIndex, questions, isTTSActive, hasSpoken]);\n  const handleMicClick = () => {\n    if (!recognitionRef.current) {\n      alert(\"Speech recognition is not supported in this browser.\");\n      return;\n    }\n    if (isListening) {\n      recognitionRef.current.stop();\n    } else {\n      recognitionRef.current.start();\n    }\n  };\n  const handleAnswerSubmit = () => {\n    const currentQuestion = questions[currentQuestionIndex];\n    if (!navigator.onLine) {\n      alert(\"Internet not connected. Please re-submit your answers.\");\n      return;\n    }\n    if (answer.trim() === \"\") {\n      alert(\"Please provide an answer before moving to the next question.\");\n      return;\n    }\n\n    // Save the current answer\n    setAnswers(prev => [...prev, {\n      id: currentQuestion.id,\n      answer\n    }]);\n    setAnswer(\"\"); // Clear the current answer input\n\n    if (currentQuestionIndex < questions.length - 1) {\n      setCurrentQuestionIndex(prev => prev + 1); // Move to the next question\n      setHasSpoken(false);\n    } else {\n      // All questions answered, submit answers to backend\n      submitAnswersToBackend();\n    }\n  };\n  const submitAnswersToBackend = async () => {\n    const rollno = localStorage.getItem(\"userEmail\");\n    const test_id = localStorage.getItem(\"test_id\");\n    try {\n      const response = await fetch(\"http://127.0.0.1:5000/submit_answers\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          rollno,\n          testid: test_id,\n          answers\n        })\n      });\n      if (response.ok) {\n        alert(\"Answers submitted successfully!\");\n        navigate(\"/dashborad\"); // Navigate to the dashboard\n      } else {\n        console.error(\"Failed to submit answers\");\n        alert(\"Failed to submit answers. Please try again.\");\n      }\n    } catch (error) {\n      console.error(\"Error submitting answers:\", error);\n      alert(\"An error occurred while submitting answers.\");\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 179,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"main-content\",\n      children: questions.length > 0 ? /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"question-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: [\"Question \", currentQuestionIndex + 1]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 183,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: questions[currentQuestionIndex].question\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 184,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: answer,\n          onChange: e => setAnswer(e.target.value),\n          className: \"answer-textbox\",\n          placeholder: \"Type your answer here...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 186,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => {\n            speakText(questions[currentQuestionIndex].question);\n          },\n          className: \"speaker-button\",\n          children: /*#__PURE__*/_jsxDEV(\"span\", {\n            role: \"img\",\n            \"aria-label\": \"Speaker\",\n            children: \"\\uD83D\\uDD0A\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 200,\n            columnNumber: 3\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 194,\n          columnNumber: 1\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"controls\",\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            className: `mic-button ${isListening ? \"active\" : \"\"}`,\n            title: isListening ? \"Click to stop recording\" : \"Click to start recording\",\n            onClick: handleMicClick,\n            children: /*#__PURE__*/_jsxDEV(\"span\", {\n              role: \"img\",\n              \"aria-label\": \"Microphone\",\n              children: \"\\uD83C\\uDFA4\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 213,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 204,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: handleAnswerSubmit,\n            className: \"submit-button\",\n            children: currentQuestionIndex === questions.length - 1 ? \"Finish Test\" : \"Next Question\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 217,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 222,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => setIsTTSActive(!isTTSActive),\n            className: \"tts-toggle-button\",\n            children: isTTSActive ? \"Disable Text-to-Speech\" : \"Enable Text-to-Speech\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 223,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 203,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 182,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Loading questions...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 232,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 180,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Footer, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 235,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 178,\n    columnNumber: 5\n  }, this);\n};\n_s(HomePage, \"zkGGJSjBI30rrR8Ic9lBNcpkI8o=\", false, function () {\n  return [useNavigate];\n});\n_c = HomePage;\nexport default HomePage;\nvar _c;\n$RefreshReg$(_c, \"HomePage\");","map":{"version":3,"names":["React","useState","useEffect","useRef","Header","Footer","useNavigate","jsxDEV","_jsxDEV","HomePage","_s","questions","setQuestions","currentQuestionIndex","setCurrentQuestionIndex","answer","setAnswer","answers","setAnswers","isListening","setIsListening","isTTSActive","setIsTTSActive","hasSpoken","setHasSpoken","recognitionRef","navigate","fetchQuestions","email","localStorage","getItem","numQuestions","selectedTopics","JSON","parse","length","alert","response","fetch","method","headers","body","stringify","parseInt","ok","data","json","console","log","setItem","test_id","error","current","window","SpeechRecognition","webkitSpeechRecognition","recognition","lang","interimResults","continuous","onstart","onend","onresult","event","transcript","Array","from","results","map","result","join","prev","onerror","speakText","text","speech","SpeechSynthesisUtterance","speechSynthesis","speak","question","handleMicClick","stop","start","handleAnswerSubmit","currentQuestion","navigator","onLine","trim","id","submitAnswersToBackend","rollno","testid","className","children","fileName","_jsxFileName","lineNumber","columnNumber","type","value","onChange","e","target","placeholder","onClick","role","title","_c","$RefreshReg$"],"sources":["C:/Users/mohan/Downloads/mock-interview-main-working/mock-interview-main-working/frontend/src/pages/home-page/HomePage.tsx"],"sourcesContent":["import React, { useState, useEffect, useRef } from \"react\";\nimport Header from \"./../../components/Header/Header\";\nimport Footer from \"./../../components/Footer/Footer\";\nimport \"./homepage.css\";\nimport { useNavigate } from \"react-router-dom\";\n\nconst HomePage: React.FC = () => {\n  const [questions, setQuestions] = useState<\n    { id: number; question: string }[]\n  >([]);\n  const [currentQuestionIndex, setCurrentQuestionIndex] = useState<number>(0);\n  const [answer, setAnswer] = useState<string>(\"\"); // Current answer text\n  const [answers, setAnswers] = useState<{ id: number; answer: string }[]>([]);\n  const [isListening, setIsListening] = useState<boolean>(false);\n  const [isTTSActive, setIsTTSActive] = useState<boolean>(true); \n  const [hasSpoken, setHasSpoken] = useState<boolean>(false); \n  const recognitionRef = useRef<any>(null);\n  const navigate = useNavigate();\n\n  useEffect(() => {\n    const fetchQuestions = async () => {\n      const email = localStorage.getItem(\"userEmail\"); // Get user email from localStorage\n      const numQuestions = localStorage.getItem(\"numQuestions\"); // Number of questions from DetailsPage\n      const selectedTopics = JSON.parse(\n        localStorage.getItem(\"selectedTopics\") || \"[]\"\n      ); // Selected topics from DetailsPage\n\n      if (!email || !numQuestions || selectedTopics.length === 0) {\n        alert(\n          \"Required details are missing. Please go back to the details page.\"\n        );\n        return;\n      }\n\n      try {\n        const response = await fetch(\"http://127.0.0.1:5000/start_test\", {\n          method: \"POST\",\n          headers: { \"Content-Type\": \"application/json\" },\n          body: JSON.stringify({\n            email,\n            numQuestions: parseInt(numQuestions),\n            selectedTopics,\n          }),\n        });\n\n        if (response.ok) {\n          const data = await response.json();\n          console.log(data);\n          setQuestions(data.questions || []);\n          localStorage.setItem(\"test_id\", data.test_id); // Store test ID in localStorage\n        } else {\n          console.error(\"Failed to fetch questions\");\n          alert(\"Failed to fetch questions. Please try again.\");\n        }\n      } catch (error) {\n        console.error(\"Error fetching questions:\", error);\n        alert(\"An error occurred while fetching questions.\");\n      }\n    };\n\n    fetchQuestions();\n  }, []);\n\n  // Initialize speech recognition\n  if (!recognitionRef.current && \"webkitSpeechRecognition\" in window) {\n    const SpeechRecognition = (window as any).webkitSpeechRecognition;\n    const recognition = new SpeechRecognition();\n\n    recognition.lang = \"en-US\";\n    recognition.interimResults = false;\n    recognition.continuous = true;\n\n    recognition.onstart = () => {\n      setIsListening(true);\n    };\n\n    recognition.onend = () => {\n      setIsListening(false);\n    };\n\n    recognition.onresult = (event: SpeechRecognitionEvent) => {\n      const transcript = Array.from(event.results)\n        .map((result) => result[0].transcript)\n        .join(\" \");\n      setAnswer((prev) => prev + \" \" + transcript); // Append recognized speech to the answer\n    };\n\n    recognition.onerror = () => {\n      setIsListening(false);\n    };\n\n    recognitionRef.current = recognition; // Save the instance\n  }\n\n  \n  const speakText = (text: string) => {\n    const speech = new SpeechSynthesisUtterance(text);\n    speech.lang = \"en-US\";\n    window.speechSynthesis.speak(speech);\n  };\n\n  useEffect(() => {\n    if (isTTSActive && questions.length > 0 && !hasSpoken) {\n      speakText(questions[currentQuestionIndex].question);\n      setHasSpoken(true); \n    }\n  }, [currentQuestionIndex, questions, isTTSActive, hasSpoken]);\n  \n\n  const handleMicClick = () => {\n    if (!recognitionRef.current) {\n      alert(\"Speech recognition is not supported in this browser.\");\n      return;\n    }\n\n    if (isListening) {\n      recognitionRef.current.stop();\n    } else {\n      recognitionRef.current.start();\n    }\n  };\n\n  const handleAnswerSubmit = () => {\n    const currentQuestion = questions[currentQuestionIndex];\n\n    if (!navigator.onLine) {\n      alert(\"Internet not connected. Please re-submit your answers.\");\n      return;\n    } \n\n    if (answer.trim() === \"\") {\n      alert(\"Please provide an answer before moving to the next question.\");\n      return;\n    }\n\n    // Save the current answer\n    setAnswers((prev) => [...prev, { id: currentQuestion.id, answer }]);\n    setAnswer(\"\"); // Clear the current answer input\n\n    if (currentQuestionIndex < questions.length - 1) {\n      setCurrentQuestionIndex((prev) => prev + 1); // Move to the next question\n      setHasSpoken(false);\n    } else {\n      // All questions answered, submit answers to backend\n      submitAnswersToBackend();\n    }\n  };\n\n  const submitAnswersToBackend = async () => {\n    const rollno = localStorage.getItem(\"userEmail\");\n    const test_id = localStorage.getItem(\"test_id\");\n\n    try {\n      const response = await fetch(\"http://127.0.0.1:5000/submit_answers\", {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify({\n          rollno,\n          testid: test_id,\n          answers,\n        }),\n      });\n\n      if (response.ok) {\n        alert(\"Answers submitted successfully!\");\n        navigate(\"/dashborad\"); // Navigate to the dashboard\n      } else {\n        console.error(\"Failed to submit answers\");\n        alert(\"Failed to submit answers. Please try again.\");\n      }\n    } catch (error) {\n      console.error(\"Error submitting answers:\", error);\n      alert(\"An error occurred while submitting answers.\");\n    }\n  };\n\n  return (\n    <div className=\"App\">\n      <Header />\n      <div className=\"main-content\">\n        {questions.length > 0 ? (\n          <div className=\"question-container\">\n            <h2>Question {currentQuestionIndex + 1}</h2>\n            <p>{questions[currentQuestionIndex].question}</p>\n\n            <input\n              type=\"text\"\n              value={answer}\n              onChange={(e) => setAnswer(e.target.value)}\n              className=\"answer-textbox\"\n              placeholder=\"Type your answer here...\"\n            />\n\n<button\n  onClick={() => {\n    speakText(questions[currentQuestionIndex].question);\n  }}\n  className=\"speaker-button\"\n>\n  <span role=\"img\" aria-label=\"Speaker\">🔊</span>\n</button>\n\n            <div className=\"controls\">\n              <button\n                className={`mic-button ${isListening ? \"active\" : \"\"}`}\n                title={\n                  isListening\n                    ? \"Click to stop recording\"\n                    : \"Click to start recording\"\n                }\n                onClick={handleMicClick}\n              >\n                <span role=\"img\" aria-label=\"Microphone\">\n                  🎤\n                </span>\n              </button>\n              <button onClick={handleAnswerSubmit} className=\"submit-button\">\n                {currentQuestionIndex === questions.length - 1\n                  ? \"Finish Test\"\n                  : \"Next Question\"}\n              </button>\n              <br></br>\n              <button\n                onClick={() => setIsTTSActive(!isTTSActive)}\n                className=\"tts-toggle-button\"\n              >\n                  {isTTSActive ? \"Disable Text-to-Speech\" : \"Enable Text-to-Speech\"}\n              </button>\n            </div>\n          </div>\n        ) : (\n          <p>Loading questions...</p>\n        )}\n      </div>\n      <Footer />\n    </div>\n  );\n};\n\nexport default HomePage;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}